{"version":3,"file":"collection.js","sources":["ng://collection/lib/collection-list.service.ts","ng://collection/lib/collection-checkbox-list.component.ts","ng://collection/lib/collection.module.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {CollectionListData} from './collection-list-data.model';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CollectionListService {\n    private collections: object = {\n        root: {\n            1: {\n                name: 'Southwest',\n                collections: [\n                    {collid: 10, collname: 'Coll 10', colltype: 'specimen'},\n                    {collid: 11, collname: 'Coll 11', colltype: 'observation'},\n                    {collid: 12, collname: 'Coll 12', colltype: 'specimen'}\n                ]\n            },\n            2: {\n                name: 'Northwest',\n                collections: [\n                    {collid: 20, collname: 'Coll 20', colltype: 'specimen'},\n                    {collid: 21, collname: 'Coll 21', colltype: 'observation'},\n                    {collid: 22, collname: 'Coll 22', colltype: 'specimen'}\n                ]\n            },\n            3: {\n                name: 'Rocky Mountain',\n                collections: [\n                    {collid: 30, collname: 'Coll 30', colltype: 'specimen'},\n                    {collid: 31, collname: 'Coll 31', colltype: 'observation'},\n                    {collid: 32, collname: 'Coll 32', colltype: 'specimen'}\n                ]\n            },\n            col40: {collid: 40, collname: 'Coll 40', colltype: 'specimen'},\n            col41: {collid: 41, collname: 'Coll 41', colltype: 'specimen'},\n            col42: {collid: 42, collname: 'Coll 42', colltype: 'specimen'}\n        }\n    };\n\n    getCollections() {\n        return this.collections;\n    }\n}\n","import {AfterViewInit, Component, Injectable, ViewChild} from '@angular/core';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {FlatTreeControl} from '@angular/cdk/tree';\nimport {MatTreeFlatDataSource, MatTreeFlattener} from '@angular/material/tree';\nimport {BehaviorSubject} from 'rxjs';\nimport {CollectionListService} from './collection-list.service';\n\nexport class DataNode {\n    name: string;\n    collid: number;\n    children: DataNode[];\n}\n\nexport class DataFlatNode {\n    name: string;\n    collid: number;\n    level: number;\n    expandable: boolean;\n}\n\n@Injectable()\nexport class CollectionsListData {\n    dataChange = new BehaviorSubject<DataNode[]>([]);\n\n    constructor(\n        private collectionListService: CollectionListService\n    ) {\n        this.initialize(this.collectionListService.getCollections());\n    }\n\n    initialize(collections) {\n        const data = this.buildFileTree(collections, 0);\n        this.dataChange.next(data);\n    }\n\n    buildFileTree(obj: object, level: number): DataNode[] {\n        return Object.keys(obj).reduce<DataNode[]>((accumulator, key) => {\n            let value;\n            const node = new DataNode();\n            if (obj[key].collname) {\n                value = obj[key];\n                node.name = obj[key].collname;\n                node.collid = obj[key].collid;\n            } else {\n                if (key === 'root') {\n                    value = obj[key];\n                    node.name = key;\n                } else {\n                    value = obj[key].collections;\n                    node.name = obj[key].name;\n                }\n                node.children = this.buildFileTree(value, level + 1);\n            }\n\n            return accumulator.concat(node);\n        }, []);\n    }\n}\n\n@Component({\n    selector: 'collection-checkbox-list',\n    templateUrl: './collection-checkbox-list.component.html',\n    styleUrls: ['./collection-checkbox-list.component.css'],\n    providers: [CollectionsListData]\n})\nexport class CollectionCheckboxListComponent implements AfterViewInit {\n\n    @ViewChild('colltree', {static: false}) tree;\n\n    flatNodeMap = new Map<DataFlatNode, DataNode>();\n\n    nestedNodeMap = new Map<DataNode, DataFlatNode>();\n\n    treeControl: FlatTreeControl<DataFlatNode>;\n\n    treeFlattener: MatTreeFlattener<DataNode, DataFlatNode>;\n\n    dataSource: MatTreeFlatDataSource<DataNode, DataFlatNode>;\n\n    checklistSelection = new SelectionModel<DataFlatNode>(true /* multiple */);\n\n    constructor(private database: CollectionsListData) {\n        this.treeFlattener = new MatTreeFlattener(this.transformer, this.getLevel,\n            this.isExpandable, this.getChildren);\n        this.treeControl = new FlatTreeControl<DataFlatNode>(this.getLevel, this.isExpandable);\n        this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n        database.dataChange.subscribe(data => {\n            this.dataSource.data = data;\n        });\n    }\n\n    getLevel = (node: DataFlatNode) => node.level;\n\n    isExpandable = (node: DataFlatNode) => node.expandable;\n\n    getChildren = (node: DataNode): DataNode[] => node.children;\n\n    hasChild = (_: number, _nodeData: DataFlatNode) => _nodeData.expandable;\n\n    transformer = (node: DataNode, level: number) => {\n        const existingNode = this.nestedNodeMap.get(node);\n        const flatNode = existingNode && existingNode.name === node.name\n            ? existingNode\n            : new DataFlatNode();\n        flatNode.name = node.name;\n        flatNode.collid = node.collid;\n        flatNode.level = level;\n        flatNode.expandable = !!node.children;\n        this.flatNodeMap.set(flatNode, node);\n        this.nestedNodeMap.set(node, flatNode);\n        return flatNode;\n    }\n\n    descendantsAllSelected(node: DataFlatNode): boolean {\n        const descendants = this.treeControl.getDescendants(node);\n        return descendants.every(child => this.checklistSelection.isSelected(child));\n    }\n\n    descendantsPartiallySelected(node: DataFlatNode): boolean {\n        const descendants = this.treeControl.getDescendants(node);\n        const result = descendants.some(child => this.checklistSelection.isSelected(child));\n        return result && !this.descendantsAllSelected(node);\n    }\n\n    todoItemSelectionToggle(node: DataFlatNode): void {\n        this.checklistSelection.toggle(node);\n        const descendants = this.treeControl.getDescendants(node);\n        this.checklistSelection.isSelected(node)\n            ? this.checklistSelection.select(...descendants)\n            : this.checklistSelection.deselect(...descendants);\n    }\n\n    ngAfterViewInit() {\n        this.treeControl.expand(this.tree.treeControl.dataNodes[0]);\n    }\n\n}\n","import {NgModule} from '@angular/core';\nimport {MatTreeModule, MatCheckboxModule, MatIconModule, MatButtonModule} from '@angular/material';\nimport {FlexLayoutModule} from '@angular/flex-layout';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {FormsModule} from '@angular/forms';\nimport {CommonModule} from '@angular/common';\n\nimport {CollectionListService} from './collection-list.service';\n\nimport {CollectionCheckboxListComponent} from './collection-checkbox-list.component';\n\n@NgModule({\n    declarations: [\n        CollectionCheckboxListComponent\n    ],\n    imports: [\n        MatTreeModule,\n        MatCheckboxModule,\n        MatIconModule,\n        MatButtonModule,\n        FlexLayoutModule,\n        ReactiveFormsModule,\n        FormsModule,\n        CommonModule\n    ],\n    exports: [\n        CollectionCheckboxListComponent\n    ],\n    entryComponents: [\n        CollectionCheckboxListComponent\n    ],\n    providers: [\n        CollectionListService,\n        {\n            provide: 'collection-checkbox-list',\n            useValue: [{\n                name: 'collection-collection-checkbox-list',\n                component: CollectionCheckboxListComponent\n            }],\n            multi: true\n        }\n    ]\n})\nexport class CollectionModule {\n}\n"],"names":[],"mappings":"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"}